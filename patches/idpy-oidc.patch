diff --git a/src/idpyoidc/client/oauth2/stand_alone_client.py b/src/idpyoidc/client/oauth2/stand_alone_client.py
index c456176..d0b31d4 100644
--- a/src/idpyoidc/client/oauth2/stand_alone_client.py
+++ b/src/idpyoidc/client/oauth2/stand_alone_client.py
@@ -137,6 +137,8 @@ class StandAloneClient(Client):
                 _params = RegistrationRequest().parameters()
                 request_args.update({k: v for k, v in behaviour_args.items() if k in _params})
 
+            request_args["aud"] = _context.issuer
+
             load_registration_response(self, request_args=request_args)
         else:
             _context.map_preferred_to_registered()
diff --git a/src/idpyoidc/storage/jsonfile.py b/src/idpyoidc/storage/jsonfile.py
new file mode 100644
index 0000000..9d28323
--- /dev/null
+++ b/src/idpyoidc/storage/jsonfile.py
@@ -0,0 +1,43 @@
+import os
+import json
+from filelock import FileLock
+
+
+class JsonArrayFile(list):
+    def __init__(self, file_name: str):
+        self._file_name = file_name
+        if not os.path.exists(file_name):
+            with open(file_name, "w", encoding="utf-8") as fp:
+                fp.write("[]")
+        # load initial data
+        data = self._read_info()
+        super().__init__(data)
+
+    def _read_info(self):
+        lock = FileLock(f"{self._file_name}.lock")
+        with lock:
+            with open(self._file_name, "r", encoding="utf-8") as fp:
+                raw = fp.read().strip()
+                if not raw:
+                    return []
+                return json.loads(raw)
+
+    def refresh(self):
+        """Reload the file contents into this list."""
+        data = self._read_info()
+        super().clear()
+        super().extend(data)
+
+    # --- block mutations ---
+    def _ro(self, *_, **__):
+        raise TypeError(f"{self.__class__.__name__} is read-only")
+
+    append = extend = insert = pop = remove = sort = reverse = _ro
+    __setitem__ = __delitem__ = __iadd__ = __imul__ = _ro
+
+    def __repr__(self):
+        return f"JsonArrayFile(path={self._file_name!r}, len={len(self)})"
+
+    def __call__(self):
+        """Return the latest contents of the file as a list (without mutating self)."""
+        return self._read_info()
diff --git a/src/idpyoidc/transform.py b/src/idpyoidc/transform.py
index 77a866a..1e457be 100644
--- a/src/idpyoidc/transform.py
+++ b/src/idpyoidc/transform.py
@@ -195,7 +195,11 @@ def preferred_to_registered(
                     if _val:
                         registered[key] = _val
                     else:
-                        raise ValueError(f"Not able to support the OPs choice: {key}={val}")
+                        if key == "scope":
+                            # Just add what I support
+                            registered[key] = _allow
+                        else:
+                            raise ValueError(f"Not able to support the OPs choice: {key}={val}")
             else:
                 registered[key] = val  # Should I just accept with the OP says ??
 
