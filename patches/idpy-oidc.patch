diff --git a/src/idpyoidc/storage/jsonfile.py b/src/idpyoidc/storage/jsonfile.py
new file mode 100644
index 0000000..9d28323
--- /dev/null
+++ b/src/idpyoidc/storage/jsonfile.py
@@ -0,0 +1,43 @@
+import os
+import json
+from filelock import FileLock
+
+
+class JsonArrayFile(list):
+    def __init__(self, file_name: str):
+        self._file_name = file_name
+        if not os.path.exists(file_name):
+            with open(file_name, "w", encoding="utf-8") as fp:
+                fp.write("[]")
+        # load initial data
+        data = self._read_info()
+        super().__init__(data)
+
+    def _read_info(self):
+        lock = FileLock(f"{self._file_name}.lock")
+        with lock:
+            with open(self._file_name, "r", encoding="utf-8") as fp:
+                raw = fp.read().strip()
+                if not raw:
+                    return []
+                return json.loads(raw)
+
+    def refresh(self):
+        """Reload the file contents into this list."""
+        data = self._read_info()
+        super().clear()
+        super().extend(data)
+
+    # --- block mutations ---
+    def _ro(self, *_, **__):
+        raise TypeError(f"{self.__class__.__name__} is read-only")
+
+    append = extend = insert = pop = remove = sort = reverse = _ro
+    __setitem__ = __delitem__ = __iadd__ = __imul__ = _ro
+
+    def __repr__(self):
+        return f"JsonArrayFile(path={self._file_name!r}, len={len(self)})"
+
+    def __call__(self):
+        """Return the latest contents of the file as a list (without mutating self)."""
+        return self._read_info()
