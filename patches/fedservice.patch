diff --git a/src/fedservice/appclient/claims/oauth2.py b/src/fedservice/appclient/claims/oauth2.py
index 3710d75..da7c678 100644
--- a/src/fedservice/appclient/claims/oauth2.py
+++ b/src/fedservice/appclient/claims/oauth2.py
@@ -15,7 +15,15 @@ class Claims(OAUth_claims):
     _supports = OAUth_claims._supports.copy()
     _supports.update({
         "signed_jwks_uri": None,
-        'organization_name': None
+        'organization_name': None,
+        'display_name': None,
+        'description': None,
+        'keywords': None,
+        'contacts': None,
+        'policy_uri': None,
+        'logo_uri': None,
+        'information_uri': None,
+        'organization_uri': None
     })
 
     callback_path = {}
diff --git a/src/fedservice/appclient/claims/oidc.py b/src/fedservice/appclient/claims/oidc.py
index c2a177a..5a66cf6 100644
--- a/src/fedservice/appclient/claims/oidc.py
+++ b/src/fedservice/appclient/claims/oidc.py
@@ -15,7 +15,15 @@ class Claims(OIDC_claims):
     _supports = OIDC_claims._supports.copy()
     _supports.update({
         "signed_jwks_uri": None,
-        'organization_name': None
+        'organization_name': None,
+        'display_name': None,
+        'description': None,
+        'keywords': None,
+        'contacts': None,
+        'policy_uri': None,
+        'logo_uri': None,
+        'information_uri': None,
+        'organization_uri': None
     })
 
     callback_path = {}
diff --git a/src/fedservice/appclient/oidc/registration.py b/src/fedservice/appclient/oidc/registration.py
index 65876f0..5a75eca 100644
--- a/src/fedservice/appclient/oidc/registration.py
+++ b/src/fedservice/appclient/oidc/registration.py
@@ -74,12 +74,15 @@ class Registration(registration.Registration):
         if _context.trust_marks:
             kwargs["trust_marks"] = _context.trust_marks
 
+        logger.debug(f"?????? {request_args}")
+
         _jws = _context.create_entity_statement(
             iss=_entity_id,
             sub=_entity_id,
             metadata=_md,
             key_jar=_federation_keyjar,
             authority_hints=_authority_hints,
+            aud=request_args.get("aud") if request_args else None,
             **kwargs)
 
         # store for later reference
diff --git a/src/fedservice/appclient/stand_alone_client_entity.py b/src/fedservice/appclient/stand_alone_client_entity.py
index 0b9ae28..f6219ab 100644
--- a/src/fedservice/appclient/stand_alone_client_entity.py
+++ b/src/fedservice/appclient/stand_alone_client_entity.py
@@ -177,6 +177,9 @@ class StandAloneClientEntity(ClientEntity):
         if len(_possible) == 1:
             if 'automatic' in _possible:
                 return
+        
+        
+        logger.warning(f"!!!!!!!!!!!!!!!{_context.issuer}")
 
         if _federation_entity.get_service("registration"):  # means I can do dynamic client registration
             if request_args is None:
@@ -185,6 +188,10 @@ class StandAloneClientEntity(ClientEntity):
             if behaviour_args:
                 _params = RegistrationRequest().parameters()
                 request_args.update({k: v for k, v in behaviour_args.items() if k in _params})
+            # set audience to OP's entity ID
+            logger.warning(f"!!!!!!!!!!!!!!!Setting 'aud' to {_context.issuer}")
+            request_args.update({"aud": _context.issuer})
+            logger.warning(f"!!!!!!!!!!!!!!!{request_args}")
 
             # root = topmost_unit(_federation_entity)
             _endpoint_name = _federation_entity.client.get_service("registration").endpoint_name
diff --git a/src/fedservice/combo/__init__.py b/src/fedservice/combo/__init__.py
index 925a1db..6ebd700 100644
--- a/src/fedservice/combo/__init__.py
+++ b/src/fedservice/combo/__init__.py
@@ -113,8 +113,12 @@ class FederationCombo(Combo):
         for federation_type, item in self._part.items():
             logger.debug(f"federation_type:{federation_type}, item:{item}")
             if isinstance(item, RPHandler): # Special treatment
+                # res[federation_type] = item.client_configs[""]["preference"]
+                logger.debug(f"RPHandler metadata: {item.client_configs['']['preference']}")
                 if client:
                     _res = client.get_metadata()
+                    logger.debug(f"Client metadata: {_res}")
+                    # res[federation_type].update(_res[federation_type])
                     res.update(_res)
             elif getattr(item, "get_metadata", None):
                 res.update(item.get_metadata(entity_type=federation_type))
diff --git a/src/fedservice/entity/__init__.py b/src/fedservice/entity/__init__.py
index 27ec390..4e0e0ca 100644
--- a/src/fedservice/entity/__init__.py
+++ b/src/fedservice/entity/__init__.py
@@ -28,10 +28,14 @@ logger = logging.getLogger(__name__)
 class FederationEntityClaims(ClaimsBase):
     _supports = {
         'organization_name': None,
+        'display_name': None,
+        'description': None,
+        'keywords': None,
         'contacts': None,
         'policy_uri': None,
         'logo_uri': None,
-        'homepage_uri': None,
+        'information_uri': None,
+        'organization_uri': None,
         'trust_mark_owners': None,
         'trust_mark_issuers': None
     }
diff --git a/src/fedservice/entity/claims.py b/src/fedservice/entity/claims.py
index 66b2ce2..cde10ba 100644
--- a/src/fedservice/entity/claims.py
+++ b/src/fedservice/entity/claims.py
@@ -90,10 +90,14 @@ class ClientClaims(OAuth2ClientClaims.Claims):
 class FederationEntityClaims(ClaimsBase):
     _supports = {
         'organization_name': None,
+        'display_name': None,
+        'description': None,
+        'keywords': None,
         'contacts': None,
         'policy_uri': None,
         'logo_uri': None,
-        'homepage_uri': None,
+        'information_uri': None,
+        'organization_uri': None,
         'trust_mark_owners': None,
         'trust_mark_issuers': None
     }
diff --git a/src/fedservice/message.py b/src/fedservice/message.py
index 06386ef..0fb7dba 100644
--- a/src/fedservice/message.py
+++ b/src/fedservice/message.py
@@ -69,9 +69,24 @@ REQUIRED_LIST_OF_DICT = ([dict], True, ser_any_list, dict_list_deser, False)
 OPTIONAL_LIST_OF_DICT = ([dict], False, ser_any_list, dict_list_deser, False)
 
 
+class InformationalMetadataExtensions(Message):
+    c_param = {
+        "organization_name": SINGLE_OPTIONAL_STRING,
+        "display_name": SINGLE_OPTIONAL_STRING,
+        "description": SINGLE_OPTIONAL_STRING,
+        "keywords": OPTIONAL_LIST_OF_STRINGS,
+        "contacts": OPTIONAL_LIST_OF_STRINGS,
+        "logo_uri": SINGLE_OPTIONAL_STRING,
+        "policy_uri": SINGLE_OPTIONAL_STRING,
+        "information_uri": SINGLE_OPTIONAL_STRING,
+        "organization_uri": SINGLE_OPTIONAL_STRING,
+    }
+
+
 class AuthorizationServerMetadata(Message):
     """Metadata for an OAuth2 Authorization Server. With Federation additions"""
-    c_param = {
+    c_param = InformationalMetadataExtensions.c_param.copy()
+    c_param.update({
         "issuer": SINGLE_REQUIRED_STRING,
         "authorization_endpoint": SINGLE_OPTIONAL_STRING,
         "token_endpoint": SINGLE_OPTIONAL_STRING,
@@ -99,7 +114,7 @@ class AuthorizationServerMetadata(Message):
         'federation_registration_endpoint': SINGLE_OPTIONAL_STRING,
         'request_authentication_methods_supported': OPTIONAL_LIST_OF_STRINGS,
         'request_authentication_signing_alg_values_supported': OPTIONAL_LIST_OF_STRINGS,
-    }
+    })
 
 
 def auth_server_info_deser(val, sformat="json"):
@@ -126,16 +141,6 @@ def naming_constraints_deser(val, sformat="json"):
 SINGLE_OPTIONAL_NAMING_CONSTRAINTS = (Message, False, msg_ser, naming_constraints_deser, False)
 
 
-class InformationalMetadataExtensions(Message):
-    c_param = {
-        "organization_name": SINGLE_OPTIONAL_STRING,
-        "contacts": OPTIONAL_LIST_OF_STRINGS,
-        "logo_url": SINGLE_OPTIONAL_STRING,
-        "policy_url": SINGLE_OPTIONAL_STRING,
-        "homepage_uri": SINGLE_OPTIONAL_STRING,
-    }
-
-
 class FederationEntity(InformationalMetadataExtensions):
     """Class representing Federation Entity metadata."""
     c_param = InformationalMetadataExtensions.c_param.copy()
@@ -185,9 +190,9 @@ class OauthClientMetadata(OAuth2Message.OauthClientMetadata):
     """Metadata for an OAuth2 Client."""
     c_param = OAuth2Message.OauthClientMetadata.c_param.copy()
     c_param.update({
-        "organization_name": SINGLE_OPTIONAL_STRING,
         "signed_jwks_uri": SINGLE_OPTIONAL_STRING,
     })
+    c_param.update(InformationalMetadataExtensions.c_param.copy())
 
 
 def oauth_client_metadata_deser(val, sformat="json"):
@@ -202,6 +207,7 @@ OPTIONAL_OAUTH_CLIENT_METADATA = (Message, False, msg_ser,
 class OauthClientInformationResponse(OauthClientMetadata):
     """The information returned by a OAuth2 Server about an OAuth2 client."""
     c_param = OauthClientMetadata.c_param.copy()
+    c_param.update(InformationalMetadataExtensions.c_param.copy())
     c_param.update({
         "client_id": SINGLE_REQUIRED_STRING,
         "client_secret": SINGLE_OPTIONAL_STRING,
@@ -227,7 +233,7 @@ OPTIONAL_OAUTH_CLIENT_REGISTRATION_RESPONSE = (
     Message, False, msg_ser, oauth_client_registration_response_deser, False)
 
 
-class OAuthProtectedResourceMetadata(Message):
+class OAuthProtectedResourceMetadata(InformationalMetadataExtensions):
     c_param = {
         "resource": SINGLE_REQUIRED_STRING,
         "authorization_servers": OPTIONAL_LIST_OF_STRINGS,
@@ -236,8 +242,8 @@ class OAuthProtectedResourceMetadata(Message):
         "bearer_methods_supported": OPTIONAL_LIST_OF_STRINGS,
         "resource_signing_alg_values_supported": OPTIONAL_LIST_OF_STRINGS,
         "client_registration_types": OPTIONAL_LIST_OF_STRINGS,
-        "organization_name": SINGLE_OPTIONAL_STRING,
     }
+    c_param.update(InformationalMetadataExtensions.c_param.copy())
 
 
 def oauth_protected_resource_deser(val, sformat="json"):
@@ -249,10 +255,38 @@ OPTIONAL_OAUTH_PROTECTED_RESOURCE_METADATA = (
     Message, False, msg_ser, oauth_protected_resource_deser, False)
 
 
+class RegistrationRequest(message.oidc.RegistrationRequest):
+    c_param = message.oidc.RegistrationRequest.c_param.copy()
+    c_param.update(InformationalMetadataExtensions.c_param.copy())
+    c_param.update({
+        'client_registration_types': REQUIRED_LIST_OF_STRINGS,
+        'signed_jwks_uri': SINGLE_OPTIONAL_STRING,
+        'jwks': SINGLE_OPTIONAL_JSON,
+        "claims_parameter_supported": OPTIONAL_LIST_OF_STRINGS,
+        "response_types_supported": OPTIONAL_LIST_OF_STRINGS,
+        "response_modes_supported": OPTIONAL_LIST_OF_STRINGS,
+        "request_object_signing_alg_values_supported": OPTIONAL_LIST_OF_STRINGS,
+        "request_object_encryption_alg_values_supported": OPTIONAL_LIST_OF_STRINGS,
+        "request_object_encryption_enc_values_supported": OPTIONAL_LIST_OF_STRINGS,
+        "code_challenge_methods_supported": OPTIONAL_LIST_OF_STRINGS,
+        "scopes_supported": OPTIONAL_LIST_OF_STRINGS,
+        "claims_suppported": OPTIONAL_LIST_OF_STRINGS
+    })
+
+
 class OIDCRPMetadata(RegistrationRequest):
     c_param = RegistrationRequest.c_param.copy()
     c_param.update({
-        "client_registration_types": REQUIRED_LIST_OF_STRINGS
+        "client_registration_types": REQUIRED_LIST_OF_STRINGS,
+        "organization_name": SINGLE_OPTIONAL_STRING,
+        "display_name": SINGLE_OPTIONAL_STRING,
+        "description": SINGLE_OPTIONAL_STRING,
+        "keywords": OPTIONAL_LIST_OF_STRINGS,
+        "contacts": OPTIONAL_LIST_OF_STRINGS,
+        "logo_uri": SINGLE_OPTIONAL_STRING,
+        "policy_uri": SINGLE_OPTIONAL_STRING,
+        "information_uri": SINGLE_OPTIONAL_STRING,
+        "organization_uri": SINGLE_OPTIONAL_STRING
     })
 
 
@@ -265,8 +299,29 @@ OPTIONAL_RP_METADATA = (
     Message, False, msg_ser, rp_metadata_deser, False)
 
 
+class RegistrationResponse(ResponseMessage):
+    """
+    Response to client_register registration requests
+    """
+
+    c_param = ResponseMessage.c_param.copy()
+    c_param.update(InformationalMetadataExtensions.c_param.copy())
+    c_param.update(
+        {
+            "client_id": SINGLE_REQUIRED_STRING,
+            "client_secret": SINGLE_OPTIONAL_STRING,
+            "registration_access_token": SINGLE_OPTIONAL_STRING,
+            "registration_client_uri": SINGLE_OPTIONAL_STRING,
+            "client_id_issued_at": SINGLE_OPTIONAL_INT,
+            "client_secret_expires_at": SINGLE_OPTIONAL_INT,
+        }
+    )
+    c_param.update(RegistrationRequest.c_param)
+
+
 class OIDCRPRegistrationResponse(RegistrationResponse):
     c_param = RegistrationResponse.c_param.copy()
+    c_param.update(InformationalMetadataExtensions.c_param.copy())
     c_param.update({
         "client_registration_types": REQUIRED_LIST_OF_STRINGS
     })
@@ -281,18 +336,27 @@ OPTIONAL_RP_REGISTRATION_RESPONSE = (
     Message, False, msg_ser, rp_registration_response_deser, False)
 
 
+class ProviderConfigurationResponse(message.oidc.ProviderConfigurationResponse):
+    c_param = message.oidc.ProviderConfigurationResponse.c_param.copy()
+    c_param.update(InformationalMetadataExtensions.c_param.copy())
+    c_param.update({
+        'client_registration_types_supported': REQUIRED_LIST_OF_STRINGS,
+        'federation_registration_endpoint': SINGLE_OPTIONAL_STRING,
+        'request_authentication_methods_supported': SINGLE_OPTIONAL_JSON,
+        'request_authentication_signing_alg_values_supported': OPTIONAL_LIST_OF_STRINGS,
+        'signed_jwks_uri': SINGLE_OPTIONAL_STRING,
+        'jwks': SINGLE_OPTIONAL_JSON
+    })
+
+
 class OPMetadata(ProviderConfigurationResponse):
     c_param = ProviderConfigurationResponse.c_param.copy()
+    c_param.update(InformationalMetadataExtensions.c_param.copy())
     c_param.update({
         "client_registration_types_supported": REQUIRED_LIST_OF_STRINGS,
         "federation_registration_endpoint": SINGLE_OPTIONAL_STRING,
         "request_authentication_methods_supported": SINGLE_OPTIONAL_JSON,
         "request_authentication_signing_alg_values_supported": OPTIONAL_LIST_OF_STRINGS,
-        "organization_name": SINGLE_OPTIONAL_STRING,
-        "contacts": OPTIONAL_LIST_OF_STRINGS,
-        "logo_uri": SINGLE_OPTIONAL_STRING,
-        "policy_uri": SINGLE_OPTIONAL_STRING,
-        "homepage_uri": SINGLE_OPTIONAL_STRING,
         "jwks": SINGLE_OPTIONAL_DICT,
         "jwks_uri": SINGLE_OPTIONAL_STRING,
         "signed_jwks_uri": SINGLE_OPTIONAL_STRING
@@ -301,12 +365,8 @@ class OPMetadata(ProviderConfigurationResponse):
 
 class FedASConfigurationResponse(ASConfigurationResponse):
     c_param = ASConfigurationResponse.c_param.copy()
+    c_param.update(InformationalMetadataExtensions.c_param.copy())
     c_param.update({
-        "organization_name": SINGLE_OPTIONAL_STRING,
-        "contacts": OPTIONAL_LIST_OF_STRINGS,
-        "logo_uri": SINGLE_OPTIONAL_STRING,
-        "policy_uri": SINGLE_OPTIONAL_STRING,
-        "homepage_uri": SINGLE_OPTIONAL_STRING,
         "jwks": SINGLE_OPTIONAL_DICT,
         "jwks_uri": SINGLE_OPTIONAL_STRING,
         "signed_jwks_uri": SINGLE_OPTIONAL_STRING
@@ -449,18 +509,18 @@ class TrustMarks(Message):
         for _id, spec in self.items():
             _trust_mark = spec.get("trust_mark")
             if _trust_mark:
-                _trust_mark_id = spec.get("trust_mark_id")
-                if _trust_mark_id:
+                _trust_mark_type = spec.get("trust_mark_type")
+                if _trust_mark_type:
                     # Have to peek into the trust mark
                     _jws = factory(_trust_mark)
                     if not _jws:
                         raise ValueError(f"Not a proper signed JWT: {_trust_mark}")
-                    _tm_id = _jws.jwt.payload().get("trust_mark_id")
-                    if _tm_id != _trust_mark_id:
-                        raise ValueError("The Trust Mark identifier MUST have the same value as the trust_mark_id "
+                    _tm_id = _jws.jwt.payload().get("trust_mark_type")
+                    if _tm_id != _trust_mark_type:
+                        raise ValueError("The Trust Mark identifier MUST have the same value as the trust_mark_type "
                                          "claim")
                 else:
-                    raise MissingRequiredAttribute("trust_mark_id")
+                    raise MissingRequiredAttribute("trust_mark_type")
             else:
                 raise MissingRequiredAttribute("trust_mark")
 
@@ -557,11 +617,11 @@ class EntityStatement(JsonWebToken):
                 _trust_mark = None
                 if isinstance(_tm["trust_mark"], str):
                     _payload = get_payload(_tm["trust_mark"])
-                    if _payload["trust_mark_id"] != _tm["trust_mark_id"]:
+                    if _payload["trust_mark_type"] != _tm["trust_mark_type"]:
                         raise ValueError("trust_mark_is values does not match")
                     _trust_mark = TrustMark(**_payload)
                 elif isinstance(_tm["trust_mark"], dict):
-                    if _tm["trust_mark"]["trust_mark_id"] != _tm["trust_mark_id"]:
+                    if _tm["trust_mark"]["trust_mark_type"] != _tm["trust_mark_type"]:
                         raise ValueError("trust_mark_is values does not match")
                     _trust_mark = TrustMark(**_tm["trust_mark"])
                 else:
@@ -574,7 +634,7 @@ class TrustMarkDelegation(Message):
     c_param = {
         "iss": SINGLE_REQUIRED_STRING,
         "sub": SINGLE_REQUIRED_STRING,
-        "trust_mark_id": SINGLE_REQUIRED_STRING,
+        "trust_mark_type": SINGLE_REQUIRED_STRING,
         "iat": SINGLE_REQUIRED_INT,
         "exp": SINGLE_OPTIONAL_INT,
         "ref": SINGLE_OPTIONAL_STRING
@@ -596,7 +656,7 @@ class TrustMark(JsonWebToken):
         "sub": SINGLE_REQUIRED_STRING,
         'iss': SINGLE_REQUIRED_STRING,
         'iat': SINGLE_REQUIRED_INT,
-        "trust_mark_id": SINGLE_REQUIRED_STRING,
+        "trust_mark_type": SINGLE_REQUIRED_STRING,
         "logo_uri": SINGLE_OPTIONAL_STRING,
         "exp": SINGLE_OPTIONAL_INT,
         "ref": SINGLE_OPTIONAL_STRING,
@@ -624,7 +684,7 @@ class TrustMark(JsonWebToken):
             _delegation.verify()
             if self.get("iss") != _delegation["sub"]:
                 raise ValueError("Not the issuer the delegation applies to")
-            if self.get("trust_mark_id") != _delegation["trust_mark_id"]:
+            if self.get("trust_mark_type") != _delegation["trust_mark_type"]:
                 raise ValueError("Not the trust mark id the delegation applies to")
             self["__delegation"] = _delegation
 
@@ -634,15 +694,15 @@ class TrustMark(JsonWebToken):
 class TrustMarkStatusRequest(Message):
     c_param = {
         "sub": SINGLE_OPTIONAL_STRING,
-        "trust_mark_id": SINGLE_OPTIONAL_STRING,
+        "trust_mark_type": SINGLE_OPTIONAL_STRING,
         "iat": SINGLE_OPTIONAL_INT,
         "trust_mark": SINGLE_OPTIONAL_STRING
     }
 
     def verify(self, **kwargs):
         if 'trust_mark' not in self:
-            if 'sub' not in self or 'trust_mark_id' not in self:
-                raise AttributeError('Must have both "sub" and "trust_mark_id" or "trust_mark"')
+            if 'sub' not in self or 'trust_mark_type' not in self:
+                raise AttributeError('Must have both "sub" and "trust_mark_type" or "trust_mark"')
 
 
 def trust_mark_deser(val, sformat="json"):
@@ -675,7 +735,7 @@ class ListRequest(Message):
     c_param = {
         "entity_type": SINGLE_OPTIONAL_STRING,
         "trust_marked": SINGLE_OPTIONAL_BOOLEAN,
-        "trust_mark_id": SINGLE_OPTIONAL_STRING,
+        "trust_mark_type": SINGLE_OPTIONAL_STRING,
         "intermediate": SINGLE_OPTIONAL_BOOLEAN
     }
 
@@ -686,57 +746,6 @@ class ListResponse(Message):
     }
 
 
-class ProviderConfigurationResponse(message.oidc.ProviderConfigurationResponse):
-    c_param = message.oidc.ProviderConfigurationResponse.c_param.copy()
-    c_param.update({
-        'client_registration_types_supported': REQUIRED_LIST_OF_STRINGS,
-        'federation_registration_endpoint': SINGLE_OPTIONAL_STRING,
-        'request_authentication_methods_supported': SINGLE_OPTIONAL_JSON,
-        'request_authentication_signing_alg_values_supported': OPTIONAL_LIST_OF_STRINGS,
-        'organization_name': SINGLE_OPTIONAL_STRING,
-        'signed_jwks_uri': SINGLE_OPTIONAL_STRING,
-        'jwks': SINGLE_OPTIONAL_JSON
-    })
-
-
-class RegistrationRequest(message.oidc.RegistrationRequest):
-    c_param = message.oidc.RegistrationRequest.c_param.copy()
-    c_param.update({
-        'client_registration_types': REQUIRED_LIST_OF_STRINGS,
-        'organization_name': SINGLE_OPTIONAL_STRING,
-        'signed_jwks_uri': SINGLE_OPTIONAL_STRING,
-        'jwks': SINGLE_OPTIONAL_JSON,
-        "claims_parameter_supported": OPTIONAL_LIST_OF_STRINGS,
-        "response_types_supported": OPTIONAL_LIST_OF_STRINGS,
-        "response_modes_supported": OPTIONAL_LIST_OF_STRINGS,
-        "request_object_signing_alg_values_supported": OPTIONAL_LIST_OF_STRINGS,
-        "request_object_encryption_alg_values_supported": OPTIONAL_LIST_OF_STRINGS,
-        "request_object_encryption_enc_values_supported": OPTIONAL_LIST_OF_STRINGS,
-        "code_challenge_methods_supported": OPTIONAL_LIST_OF_STRINGS,
-        "scopes_supported": OPTIONAL_LIST_OF_STRINGS,
-        "claims_suppported": OPTIONAL_LIST_OF_STRINGS
-    })
-
-
-class RegistrationResponse(ResponseMessage):
-    """
-    Response to client_register registration requests
-    """
-
-    c_param = ResponseMessage.c_param.copy()
-    c_param.update(
-        {
-            "client_id": SINGLE_REQUIRED_STRING,
-            "client_secret": SINGLE_OPTIONAL_STRING,
-            "registration_access_token": SINGLE_OPTIONAL_STRING,
-            "registration_client_uri": SINGLE_OPTIONAL_STRING,
-            "client_id_issued_at": SINGLE_OPTIONAL_INT,
-            "client_secret_expires_at": SINGLE_OPTIONAL_INT,
-        }
-    )
-    c_param.update(RegistrationRequest.c_param)
-
-
 class HistoricalKeysResponse(Message):
     c_param = {
         'iss': SINGLE_REQUIRED_STRING,
@@ -747,7 +756,7 @@ class HistoricalKeysResponse(Message):
 
 class TrustMarkRequest(Message):
     c_param = {
-        "trust_mark_id": SINGLE_REQUIRED_STRING,
+        "trust_mark_type": SINGLE_REQUIRED_STRING,
         "sub": SINGLE_REQUIRED_STRING
     }
 
@@ -756,7 +765,7 @@ class WhoRequest(Message):
     c_param = {
         "entity_type": SINGLE_OPTIONAL_STRING,
         "credential_type": SINGLE_OPTIONAL_STRING,
-        "trust_mark_id": SINGLE_OPTIONAL_STRING
+        "trust_mark_type": SINGLE_OPTIONAL_STRING
     }
 
 
